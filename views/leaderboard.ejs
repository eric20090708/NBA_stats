<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>League LeaderBoard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="/styles/leaderboard.css">
</head>

<body>
    <div class="main">
        <div class="container mt-5">
            <div id="progressBarContainer">
                <div id="progressBar"></div>
                <div id="loadingText">Data is loading...</div>
            </div>
            <select id="stat-select" class="form-select mb-3" aria-label="Stat term selector">
                <option selected>Choose a stat term</option>
                <option value="min">Min</option>
                <option value="pts">Points</option>
                <option value="fgm">FGM</option>
                <option value="fga">FGA</option>
                <option value="fg_pct">FG%</option>
                <option value="fg3_pct">FG3%</option>
                <option value="fg3m">FG3M</option>
                <option value="fg3a">FG3A</option>
                <option value="ftm">FTM</option>
                <option value="fta">FTA</option>
                <option value="ft_pct">FT%</option>
                <option value="oreb">Off Reb</option>
                <option value="dreb">Def Reb</option>
                <option value="reb">Tot Reb</option>
                <option value="ast">Assists</option>
                <option value="pf">PFouls</option>
                <option value="stl">Steals</option>
                <option value="blk">Blocks</option>
                <option value="turnover">Turnovers</option>
            </select>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item"><a class="page-link" href="#" id="previous-page">Previous</a></li>
                    <li class="page-item"><a class="page-link" href="#" id="next-page">Next</a></li>
                </ul>
            </nav>
        </div>
        <div class="table-responsive">
            <table class="table table-striped">
                <!-- Table Header -->
                <tbody>
                    <!-- Players List -->
                </tbody>
            </table>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            const pageSize = 25;
            let currentPage = 1;
            let playersData = []; 
            let statName = null;
            let evtSource = null;

            const statSelectElement = document.getElementById('stat-select');
            const previousPageButton = document.getElementById('previous-page');
            const nextPageButton = document.getElementById('next-page');
            const tableBody = document.querySelector('.table-responsive tbody');
            const progressBar = document.getElementById('progressBar');
            const progressBarContainer = document.getElementById('progressBarContainer');

            function updateProgressBar(progress) {
                progressBar.style.width = progress + '%';
                progressBar.textContent = progress.toFixed(0) + '%';
                if (progress >= 100) {
                    progressBar.textContent = '';
                }
            }

            progressBar.style.display = 'none';
            progressBarContainer.style.display = 'none';

            function setupEventSource(statTerm) {
                if (evtSource) {
                    evtSource.close(); 
                }
                evtSource = new EventSource(`/leaderboard/progress/${statTerm}`);
                evtSource.onmessage = function (event) {
                    const data = JSON.parse(event.data);
                    updateProgressBar(data.progress);
                    //if(data.progress)
                    if (data.progress >= 100) {
                        setTimeout(() => {
                            progressBar.style.display = 'none';
                            progressBarContainer.style.display ='none';
                        }, 500); 
                        data.progress = 0;
                        evtSource.close();
                    }
                };
                evtSource.onerror = function (event) {
                    console.error('EventSource encountered an error:', event);
                };
            }

            function renderPage(page) {
                const start = (page - 1) * pageSize;
                const end = start + pageSize;
                const paginatedItems = playersData.slice(start, end);

                tableBody.innerHTML = ''; // Clear the table
                paginatedItems.forEach((player, index) => {
                    const row = tableBody.insertRow();
                    row.insertCell().textContent = start + index + 1;
                    row.insertCell().textContent = player.name;
                    row.insertCell().textContent = player.team;
                    row.insertCell().textContent = player.statValue;
                });
            }

            function updatePagination() {
                previousPageButton.parentElement.classList.toggle('disabled', currentPage === 1);
                const totalPages = Math.ceil(playersData.length / pageSize);
                nextPageButton.parentElement.classList.toggle('disabled', currentPage === totalPages);
            }

            function updateProgress(statTerm) {
                fetch(`/leaderboard/progress/${statTerm}`)
                    .then(data => {
                        const progress = data.progress;
                        document.getElementById('progressBar').style.width = progress + '%';
                        if (progress < 100) {
                            setTimeout(() => updateProgress(statTerm), 1000);
                        }
                    })
                    .catch(error => console.error('Error fetching progress:', error));
            }

            statSelectElement.addEventListener('change', function () {
                const statTerm = this.value;
                if (statTerm && statTerm !== 'Choose a stat term') {

                    progressBarContainer.style.display = 'block';
                    progressBar.style.width = '0%';
                    progressBar.textContent = '0%';

                    if (evtSource) {
                        evtSource.close();
                    }

                    setupEventSource(statTerm);
                    fetch(`/leaderboard/${statTerm}`)
                        .then(response => response.json())
                        .then(data => {
                            playersData = data.players; 
                            statName = data.statTerm;
                            currentPage = 1; 
                            renderPage(currentPage);
                            updatePagination();
                        })
                        .catch(error => console.error('Error fetching data:', error));
                }
            });

            previousPageButton.addEventListener('click', function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    renderPage(currentPage);
                    updatePagination();
                }
            });

            nextPageButton.addEventListener('click', function (e) {
                e.preventDefault();
                const totalPages = Math.ceil(playersData.length / pageSize);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderPage(currentPage);
                    updatePagination();
                }
            });
        });
    </script>
</body>

</html>